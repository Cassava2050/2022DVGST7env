---
title: "DVGST trials 2022"
author: "Luis Fernando Delgado Munoz"
format: html
code-fold: true
code-tools: true
editor: visual
---

# Introduction

This document is showing the data analysis of 7 DVGST training population trials in Colombia.

Year 2022

-   202256DVGST_stom
-   202257DVGST_momi
-   202258DVGST_ciat (Hasn't yet been harvested)
-   202271DVGST_ciat 

Year 2021

-   202151DVGST_ciat
-   202176DVGST_repe
-   202177DVGST_momi

The trials were managed by CIAT and the locations were:

-   Momil, Cordoba - Colombia
-   Santo Tomas, Atlantico - Colombia
-   Repelon, Atlantico - Colombia
-   CIAT, Valle del Cauca - Colombia

## Load the libraries

```{r}
rm(list = ls())
library(pacman)
pacman::p_load(tidyverse, 
               fauxnaif, 
               readxl, 
               yarrr, 
               statgenSTA, 
               statgenGxE, 
               openxlsx, 
               QBMS, 
               agriutilities, 
               lubridate, 
               SpATS, 
               ggsci)
source("https://raw.githubusercontent.com/Cassava2050/PPD/main/utilities_tidy.R")
```

## Load the files to check

```{r}
local_file <- "yes" # "no"

if (local_file == "yes") {
  folder <- here::here("data//") 
  file <- "phenotype3.csv"
  skip_col <- 3 # double check the number of col skipped
  trial_interest = "DVGST"
  year_interest <- 2022
}
# 1) load the data
sel_data1 <- read_cassavabase(phenotypeFile = paste0(folder, file))
```

## Load the files to check

```{r}
local_file <- "yes" # "no"

if (local_file == "yes") {
  folder <- here::here("data//") 
  file <- "phenotype71.csv"
  skip_col <- 3 # double check the number of col skipped
  trial_interest = "DVGST"
  year_interest <- 2022
}
# 1) load the data
sel_data2 <- read_cassavabase(phenotypeFile = paste0(folder, file))
```

## Bind data sets

```{r}
sel_data <- sel_data1 %>% bind_rows(sel_data2)
```


## Change columns into standar names

```{r}
# ---- Change columns into standar names ----
sel_data_kp <- change_colname(sel_data, NA)
```

## change the column class

```{r}
obs_col <- c(
  names(sel_data_kp)[str_detect(names(sel_data_kp), "obs_")],
  "use_rep_number", "blockNumber",
  "use_plot_number", "use_plot_width",
  "use_plot_length"
)
sel_data_kp <- sel_data_kp %>% 
  mutate(across(all_of(obs_col), as.numeric))
names(sel_data_kp) = gsub("-", "_", names(sel_data_kp))
```

## Duplications in row and cols

```{r}
duplicated_plot <- row_col_dup(sel_data_kp)
```

## fix VENEZOLANA accession_name. Convert into Venezolana

```{r}
sel_data_kp <- sel_data_kp %>% 
  mutate(use_accession_name = 
           ifelse(use_plot_name == "202176DVGST_repe_rep1_VENEZOLANA_163", "Venezolana", use_accession_name)) %>% 
  mutate(use_accession_name = 
           ifelse(use_plot_name == "202176DVGST_repe_rep2_VENEZOLANA_743", "Venezolana", use_accession_name))

```

## Plot trial layout

```{r, fig.height=12, fig.width=14}

trial_layout <- function(trial = sel_data_kp) {
  trial_list <- unique(trial$use_trial_name)
  for (i in 1:length(trial_list)) {
    trial_i <- trial %>%
      filter(use_trial_name %in% trial_list[i])
    myplot <- ggplot(trial_i, aes(x = factor(use_col_number), y = factor(use_row_number), fill = factor(use_rep_number))) +
      geom_tile(color = "black", linewidth = 0.5) + # Black border on tiles
      geom_tile(
        data = trial_i %>% filter(use_check_test == "check"),
        aes(fill = use_check_test), col = "black"
      ) +
      scale_fill_jco() +
      geom_text(
        data = trial_i %>% filter(use_check_test == "check"),
        aes(label = use_accession_name), size = 2
      ) +
      # geom_text(
      #   data = trial_i %>% filter(use_check_test == "test"),
      #   aes(label = use_plot_number), size = 3
      # ) +
      labs(x = "col_number", y = "row_number", fill = "rep", title = trial_list[i]) +
      coord_fixed() + # Square tiles
      theme_xiaofei()

    print(myplot)
    
    # ggsave(paste("images\\layout", trial_list[6], Sys.Date(), ".png", sep = "_"),
    #    plot = myplot, units = "in", dpi = 300, width = 14, height = 12)
  }
}
trial_layout(sel_data_kp)




```

## Check the clone name

```{r}
cloneName_new_old <- check_clone_name(
  clone_list = sel_data_kp$use_accession_name,
  new_names = NA,
  add_check = NULL
)

trial_standard <- sel_data_kp %>%
  left_join(cloneName_new_old,
    by = c("use_accession_name" = "accession_name_ori")
  ) %>%
  select(-use_accession_name) %>%
  rename(use_accession_name = use_accession_name.y)
```

## Add GIS data

```{r}
trial_standard <- add_GIS(trial_standard)
```

## Location Map

```{r}
accession_rep_ct <- trial_standard %>%
  count(use_trial_name, use_accession_name, use_rep_number)  %>%
  arrange(use_trial_name) %>%
  filter(n>1)
accession_rep_ct 
```

## Genotypes per trial

```{r}
conducted_trials <- 
  trial_standard %>% group_by(use_trial_name, use_plant_date,use_harvest_date, use_location) %>% 
  summarise(n_gen = n_distinct(use_accession_name)) %>% 
  mutate(harvesting_time = 
           interval(ymd(use_plant_date), ymd(use_harvest_date)) %>% as.period,
         harvesting_time = paste0(harvesting_time@month, "month ", harvesting_time@day, "day")) %>% 
  ungroup()

conducted_trials

conducted_trials %>% relocate(harvesting_time, .after = use_harvest_date) %>% 
  write.table("clipboard", sep="\t", col.names = T, row.names = F)
```

## plot plant number

```{r}
plants_plot <- trial_standard %>%
  group_by(use_trial_name) %>%
  count(obs_planted_number_plot) 
plants_plot
```

## Frequency harvest plant number

```{r}
plants_harvested <- trial_standard %>%
  group_by(use_trial_name) %>%
  count(obs_harvest_number) %>% arrange(desc(obs_harvest_number))

plants_to_harvest <- plants_harvested %>% 
  ggplot(aes(x = factor(obs_harvest_number), 
             y = n, fill = factor(obs_harvest_number))) +
  geom_col(col = 'black') +
  scale_fill_jco() +
  theme_xiaofei() +
  labs(x = "Harvest_plant_number", y = "Freq", fill = "Harvest_plant_number") +
  facet_wrap(~ use_trial_name)

# ggsave(paste("images\\bar", trial_interest, Sys.Date(), ".png", sep = "_"),
#        plot = plants_to_harvest, units = "in", dpi = 300, width = 8, height = 4)

```

## Compute germination, yield, yield_starch

```{r}
  
trial_standard_new <- trial_standard %>%
  mutate(obs_harvest_number_plan =
           case_when(str_detect(use_trial_name, "202151") &  str_detect(use_trial_name , trial_interest) ~ 2,
                     str_detect(use_trial_name, "202176") &  str_detect(use_trial_name , trial_interest) ~ 4,
                     str_detect(use_trial_name, "202177") &  str_detect(use_trial_name , trial_interest) ~ 4,
                     str_detect(use_trial_name, "202256") &  str_detect(use_trial_name , trial_interest) ~ 4,
                     str_detect(use_trial_name, "202257") &  str_detect(use_trial_name , trial_interest) ~ 4,
                     str_detect(use_trial_name, "202271") &  str_detect(use_trial_name , trial_interest) ~ 2),
         obs_germination_perc = obs_germinated_number_plot/obs_planted_number_plot * 100,
         # 2) calculate area per plant
         area_plant = (use_plot_length*use_plot_width)/obs_planted_number_plot,
         # 3) calculate the yield_v4 obs_planted_number_plot
         obs_yield_ha_v2 = (((obs_root_weight_plot*10000)/(area_plant*obs_harvest_number_plan))/1000),
         obs_DM_yield_ha = obs_DM_gravity * obs_yield_ha_v2 / 100,
         .after = obs_yield_ha)
```

## Plot the yield_v2 vs yiel upload by Lizbeth

```{r}
library(plotly)
p1 <- trial_standard_new %>% ggplot() +
  geom_point(aes(x = obs_yield_ha, y = obs_yield_ha_v2, color = use_plot_number), show.legend = F) +
  facet_wrap(~use_trial_name) +
  theme_xiaofei()
ggplotly(p1)
detach("package:plotly", unload = TRUE)
```

## Is numeric all traits?

```{r}
is_numeric(trial_data = trial_standard_new)
```

## Get the tidy data

```{r}
meta_info = names(trial_standard_new)[str_detect(names(trial_standard_new), "use_")]
meta_info = gsub("use_", "", meta_info)
meta_info
trial_tidy = trial_standard_new
names(trial_tidy)= gsub("use_", "", names(trial_standard_new))
# observations
trait_list = names(trial_tidy)[str_detect(names(trial_tidy), "obs_")]
trait_list = gsub("obs_", "", trait_list)
trait_list
names(trial_tidy)= gsub("obs_", "", names(trial_tidy))
trial_tidy = trial_tidy[c(meta_info, trait_list)]
```

## Issues related with high values in DM_gravity

```{r}

trial_tidy <- trial_tidy %>% 
  mutate(DM_gravity = 
           ifelse(plot_name == "202257DVGST_momi_rep1_GM14164A-7_493", NA, DM_gravity)) %>% #
  mutate(DM_gravity = 
           ifelse(plot_name == "202257DVGST_momi_rep2_GM14208A-5_1566", NA, DM_gravity))


## Coalesce WAB variables

trial_tidy <- trial_tidy %>% 
  mutate(WAB_20min_10mon = coalesce(WAB_20min_10mon, WAB_20min_12mon)) %>%
  mutate(WAB_30min_10mon = coalesce(WAB_30min_10mon, WAB_30min_12mon)) %>% 
  select(-c(WAB_20min_12mon, WAB_30min_12mon))


```

# Boxplots

```{r warning=FALSE}
# remove columns with all NA
my_dat_noNA <- trial_tidy[, colSums(is.na(trial_tidy)) < nrow(trial_tidy)]
trait_wanted <- names(my_dat_noNA)[names(my_dat_noNA) %in% trait_list]
for (i in 1:length(trait_wanted)) {
  y_DATA <- my_dat_noNA[[trait_wanted[i]]] # data frame or vector?
  x_DATA <- my_dat_noNA$trial_name
  my_DATA <- my_dat_noNA
  y_LABEL <- trait_wanted[i]
  x_LABEL <- NULL
  TITLE <- NULL
  y_MAX <- max(y_DATA, na.rm = TRUE) * 1.2
  y_MIN <- 0
  plot_box <- ggplot(my_DATA, aes(x = x_DATA, y = y_DATA)) +
    geom_violin(trim = FALSE, fill = "gray") +
    geom_boxplot(width = 0.2) +
    coord_cartesian(ylim = c(y_MIN, y_MAX)) +
    theme_xiaofei() +
    labs(
      y = y_LABEL, x = x_LABEL,
      title = TITLE
    )
  plot(plot_box)
}
```

## Grouping boxplot

```{r}
plot_bxp <- trial_tidy %>%
  pivot_longer(
    cols = all_of(trait_wanted),
    names_to = "var",
    values_to = "values"
  ) %>%
  filter(!var %in% c(
    "stake_plant", "planted_number_plot",
    "harvest_number", "root_weight_air",
    "root_weight_water", "harvest_number_plan",
    "root_rot_perc", "yield_ha_v2"
  )) %>%
  ggplot(aes(x = trial_name, y = values)) +
  geom_violin(trim = FALSE, fill = "gray") +
  geom_boxplot(width = 0.2, trim = FALSE) +
  labs(x = NULL, y = NULL, title = "") +
  theme_xiaofei() +
  theme(
    axis.text.x = element_text(size = 8, vjust = 1, angle = 65),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(color = "black"),
    strip.text.x = element_text(
      size = 8, face = "bold.italic")
  ) +
  facet_wrap(~var,
    ncol = 5, scales = "free_y"
  ) 
plot_bxp
# ggsave(paste0("images\\boxplot_", trial_interest, Sys.Date(), ".png"),
#     plot = plot_bxp, units = "in", dpi = 300, width = 14, height = 10
#   )
```

## Save the tidy data for analysis

```{r eval=FALSE}
write.csv(trial_tidy, here::here("output", paste("01_", year_interest, trial_interest,
  "_tidy_data4analysis_", Sys.Date(), ".csv", sep = "")), row.names = FALSE)
```

# Data analysis

## Load libraries

```{r}
rm(list = ls())
library(pacman)
pacman::p_load(tidyverse, 
               fauxnaif, 
               readxl, 
               yarrr, 
               statgenSTA, 
               statgenGxE, 
               openxlsx, 
               QBMS, 
               agriutilities, 
               asreml, 
               SpATS, 
               ggsci,
               lubridate,
               magrittr,
               corrplot)
source("https://raw.githubusercontent.com/Cassava2050/PPD/main/utilities_tidy.R")

trial_interest <- "DVGST"
year_interest <- 2022
```

## master_data to save the results

```{r}
master_data <- list()
```

## Load the tidy data

```{r}
trial_set_number = 1
# all files in the folder
list_file = list.files(here::here("output"))
# tidy data of the trials interested
sel_file = list_file[str_detect(list_file, "_tidy_data4analysis_") &
                       str_detect(list_file,
                                  paste(year_interest, trial_interest, sep=""))]
# the data we will use
sel_file_use = sel_file[1]

sel_file_use
trial1_tidy = read.csv(here::here("output", sel_file_use), header=TRUE,
                        stringsAsFactors = FALSE,
                        as.is=T,
                        check.names = FALSE)
if(trial_set_number == 1){
  trial_tidy_all = trial1_tidy
}
```

## Obtain all the trait information using a cloud file (gitHub) -------

```{r}
trait_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "obs_"))
trait_all_adj <- gsub("obs_", "", trait_all$analysis_col_name)
trait_all_adj = c(trait_all_adj,
                  "harvest_number_plan", "germination_perc",
                  "yield_ha_v2", "DM_yield_ha", "starch_content")
trait_all_adj <- gsub("-", "_", trait_all_adj)
```

## Meta info.

```{r}
meta_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "use_"))
meta_all_adj <- gsub("use_", "", meta_all$analysis_col_name)
meta_all_adj <- c(
  meta_all_adj,
  "check_released", "latitude", "longitude",
  "altitude", "department", "country",
  "ag_zone", "location_short"
)
```

## Select the observations for analysis

```{r}
names(trial_tidy_all) <- gsub("-", "_", names(trial_tidy_all))
analysis_trait <- names(trial_tidy_all)[names(trial_tidy_all) %in% trait_all_adj]
print("All the traits investigated:")
print(analysis_trait)
```

## Select the meta information for analysis

```{r}
meta_col <- names(trial_tidy_all)[names(trial_tidy_all) %in% meta_all_adj]
print("All the meta information:")
print(meta_col)
```

## Check the SD of each trait

```{r}
trial_rm_sd <- remove_no_var_tidy(my_dat = trial_tidy_all,
                   analysis_trait = analysis_trait,
                   meta_info = meta_col)
master_data[["mean_of_sd"]] = sd_mean
```

## Trait ideal

```{r}
no_traits_for_analysis <- c("stake_plant" , "planted_number_plot", 
                            "harvest_number", "root_weight_air", 
                            "root_weight_water", "harvest_number_plan",
                            "yield_ha_v2", "root_rot_perc", "CBB_3mon"
)
trait_ideal <- analysis_trait[!analysis_trait %in% no_traits_for_analysis]
print("the trait ideal is:"); 

trait_ideal %>% as.data.frame() %>% write.table("clipboard", sep = "\t", col.names = T, row.names = F)
```

# Missing data analysis

```{r}
missing_data <- trial_tidy_all %>% 
  filter(str_detect(trial_name, "2022"), 
         accession_name %in% c("GM14207B-7", "GM13995A-5", "GM14069B-7")) %>% 
  select(trial_name, accession_name, rep_number, all_of(trait_ideal))


missing_data %>% select(-c(WAB_20min_12mon, WAB_30min_12mon, betacarotenoid_nirs)) %>% 
   pivot_longer(cols = trait_ideal[-c(1, 2, 4)], names_to = "traits", values_to = "count")
library(naniar)

 gg_miss_var(
  missing_data %>% select(-c(WAB_20min_12mon, WAB_30min_12mon, betacarotenoid_nirs)), 
  show_pct = TRUE,
   facet = accession_name)
```

# Genotypic correlation (Phenotypic values)

```{r}
correlation <- gg_cor(
  colours = c("red", "white", "blue"),
  data = trial_rm_sd[, trait_ideal],
  label_size = 2
  )
# ggsave(paste("images\\pheno_corr", trial_interest, group, Sys.Date(), ".png", sep = "_"),
#      plot = correlation, units = "in", dpi = 300, width = 12, height = 8
#    )

ggsave(paste("images\\pheno_corr", trial_interest, Sys.Date(), ".png", sep = "_"),
     plot = correlation, units = "in", dpi = 300, width = 12, height = 8
   )
```

## Check design experimental

### Agriutilities library

```{r}
my_dat <- trial_rm_sd %>% 
  add_column(block = NA) %>% mutate(block = as.factor(block))

my_dat <- my_dat[!my_dat$trial_name %in% c("202151DVGST_ciat"), ]

 
#cohort <- "first"
#cohort <- "second"

if(cohort == "first") { 
my_dat <- my_dat %>% filter(trial_name %in% c("202177DVGST_momi", "202176DVGST_repe"))
}else{
my_dat <- my_dat %>% filter(trial_name %in% c("202256DVGST_stom", "202257DVGST_momi"))
}

my_dat$trial_name %>% unique()

results <- check_design_met(
  data = my_dat, #my_dat_1
  genotype = "accession_name",
  trial = "trial_name",
  traits = trait_ideal,
  rep = "rep_number",
  col = "col_number",
  row = "row_number",
  block = "block"
)

shared <- plot(results, type = "connectivity")

# ggsave(paste('images\\shared_', trial_interest, Sys.Date(), ".png", sep = "_"),
#        plot = shared, units = "in", dpi = 300, width = 8, height = 6)

summary <- results$summ_traits 

p1 <- summary %>% 
  ggplot(aes(x = traits , y = trial_name, label = round(miss_perc,2),  fill = miss_perc ))+
  geom_tile(color = "gray")+
  geom_text(color = "white")+
  theme_minimal(base_size = 13)+
  labs(title = "Percentage of missing values (exp/trait)", x = "", y = "") +
  theme(axis.text.x = element_text(hjust = 1 , angle = 75, size = 16),
        axis.text.y = element_text(size = 16))
p1
# ggsave(paste("images\\missing_", trial_interest, Sys.Date(), ".png", sep = "_"),
#      plot = p1, units = "in", dpi = 300, width = 15, height = 6
#    )
master_data[["summ_traits"]] <- summary
```

## Single trial analysis

```{r}
obj <- single_trial_analysis(results = results,
                             progress = TRUE,
                             remove_outliers = FALSE)

#elements_to_remove <- c("202050DVPRG_ciat", "202136DVPRG_ciat")

trials <- unique(my_dat$trial_name)

header_sort = vector()
i = 1
for (i in 1:length(trials)) {
  
  cat("\n_______________")
  cat("\nTRIAL:", trials[i], "\n")
  cat("_______________\n")
  
  for (j in 1:length(trait_ideal)) {
    
    blue_blup <- obj$blues_blups %>% 
      filter(trial == trials[i]) %>% 
      select(-c(trial, seBLUEs, seBLUPs, wt)) %>% 
      pivot_wider(names_from = "trait", values_from = c("BLUEs", "BLUPs"))
    
    header_sort = c(header_sort,
                  grep(trait_ideal[j], sort(names(blue_blup)), value=TRUE))
  blue_blup <- blue_blup %>% dplyr::select(genotype, any_of(header_sort)) %>% 
    mutate(across(where(is.numeric), round, 1))
  }
 master_data[[paste0("BLUP_BLUE_", trials[i])]] <- blue_blup
}

master_data$BLUP_BLUE_202256DVGST_stom %>% 
  select(genotype, matches("BLUEs_yield_ha|BLUPs_yield_ha")) %>% 
  ggplot(aes(x = BLUEs_yield_ha, y = BLUPs_yield_ha)) +
  geom_point()

mod <- lm(BLUPs_yield_ha ~ BLUEs_yield_ha, data = master_data$BLUP_BLUE_202256DVGST_stom %>% 
  select(genotype, matches("BLUEs_yield_ha|BLUPs_yield_ha")))
summary(mod)

```

```{r}
accession_remove <- c("CM4919-1_is_Veronica", "TAI8_is_TAI")
reps_yield <- my_dat %>% filter(trial_name == "202256DVGST_stom", check_test == "test") %>%  
                 # !accession_name %in% accession_remove) %>% 
  select(check_test, accession_name, rep_number, yield_ha) %>%
  pivot_wider(names_from = rep_number, values_from = yield_ha) %>% 
  rename(rep_1 = `1`, 
         rep_2 = `2`)


reps_yield %>% ggplot(aes(x = rep_1, y = rep_2)) +
  geom_point() +
  geom_smooth(method = "lm", se = F)

  
```

# single THRIPS

```{r}
library(SpATS)

my_dat57 <- my_dat %>% filter(trial_name == "202256DVGST_stom") %>% 
  mutate(R = as.factor(row_number),
         C = as.factor(col_number))
         

ncols = length(unique(my_dat57$C))
nrows = length(unique(my_dat57$R))


mo_spatial <- SpATS(
    response = "yield_ha",
    genotype = "accession_name",
    genotype.as.random = TRUE,     #TRUE ---select one 
    fixed = NULL,
    spatial = ~ PSANOVA(col_number,
      row_number,
      nseg = c(ncols, nrows),
      degree = c(3, 3),
      nest.div = 2
    ),
    random = ~ R + C,
    data = my_dat57,
    control = list(tolerance = 1e-03, monitoring = 1)
  )

plot(mo_spatial)
var.m0 <- variogram(mo_spatial)
plot(var.m0)
getHeritability(mo_spatial)
```

## Single heritability

```{r}
single_h2 <- obj$resum_fitted_model[ ,1:3] %>% 
  group_by(trial) %>%
  spread(trait, value = heritability) 

heri <- obj$resum_fitted_model[ ,1:3] %>% 
  ggplot(aes(x = trait, y = heritability, fill = trial)) +
  geom_col(col = "black", 
           position = 
             position_dodge2(width = 0.7, preserve = "single", padding = 0.05)) +
  scale_fill_jco() +
  #geom_text(aes(label = heritability), vjust = -0.2, size = 2) +
  #facet_wrap(~ trial, ncol = 2) +
  theme_xiaofei() +
  theme(axis.text.x = element_text(vjust = 1, angle = 65))
heri  

 # ggsave(paste0("images\\heri_single", trial_interest, Sys.Date(), ".png"),
 #       plot = heri, units = "in", dpi = 300, width = 12, height = 6)
  
master_data[["single_h2"]] <- single_h2


single_h2 %>%
  write.table("clipboard", sep = "\t", col.names = T, row.names = F, na = "")
```

## Multi environmetal analysis

```{r}
traits_to_remove <- single_h2 %>% 
  pivot_longer(!trial, names_to = "traits", values_to = "heritability") %>% 
  filter(heritability < 0.1 | is.na(heritability)) %>% distinct(traits) %>% pull(traits)

# traits removed because of low heritability
single_h2 %>% 
  pivot_longer(!trial, names_to = "traits", values_to = "heritability") %>% 
  filter(heritability < 0.1 | is.na(heritability)) %>% 
  write.table("clipboard", sep = "\t", col.names = T, row.names = F)

met_results <- met_analysis(obj, 
                            filter_traits = trait_ideal[!trait_ideal %in% c(traits_to_remove)],
                            h2_filter = 0.09,
                            progress = TRUE)


# h2 gxe
master_data[["h2_gxe"]] <- 
  met_results$heritability %>% 
  arrange(desc(h2)) %>%
  mutate(across(where(is.numeric), round, 2))

master_data$h2_gxe %>%
  write.table("clipboard", col.names = T, row.names = F, sep = "\t")

# BLUPs gxe
BLUPs_table <- 
  met_results$overall_BLUPs %>% 
  select(-c(std.error, status)) %>% 
  group_by(genotype) %>% 
  spread(trait, value = predicted.value) %>% 
  rename("accession_name" = genotype) %>% 
  mutate(across(where(is.numeric), round, 2)) %>% 
  ungroup() 
#save the BLUPs data
master_data[[paste0("BLUPs_", "gxe")]] <- BLUPs_table
```

## Genotypic Correlation: Locations

```{r dpi=300}

#Yield
corrplot(met_results$VCOV$yield_ha$CORR, method="color",  
         type="lower", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black",
         tl.cex = 0.8,#Text label color and rotation
         diag=T 
         )

#Dry matter
corrplot(met_results$VCOV$DM_gravity$CORR, method="color",  
         type="lower", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black",
         tl.cex = 0.8,#Text label color and rotation
         diag=T 
         )
# plant_type
corrplot(met_results$VCOV$height_1st_branch$CORR, method="color",  
         type="lower", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black",
         tl.cex = 0.8,#Text label color and rotation
         diag=T
         )

# germination_perc
corrplot(met_results$VCOV$germination_perc$CORR, method="color",  
         type="lower", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black",
         tl.cex = 0.8,#Text label color and rotation
         diag=T
         )

# height_1st_branch

corrplot(met_results$VCOV$thrips1_5$CORR, method="color",  
         type="lower", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black",
         tl.cex = 0.8,#Text label color and rotation
         diag=T
         )

# carotenoid1_8
corrplot(met_results$VCOV$carotenoid1_8$CORR, method="color",  
         type="lower", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black",
         tl.cex = 0.8,#Text label color and rotation
         diag=T
         )

```

## Save the BLUEs or raw data across the trials

```{r}
variables <- colnames(BLUPs_table)[!grepl("accession_name", colnames(BLUPs_table))]
for (var in variables) {
  
  blue_blup <-
  obj$blues_blups %>%
  select(trial, genotype, trait, BLUEs) %>%
  spread(trait, value = BLUEs) %>%
  select(trial, genotype, any_of(var)) %>%
  group_by(trial, genotype) %>%
  pivot_wider(names_from = trial, values_from = any_of(var)) %>%
  right_join(BLUPs_table %>%
    select(accession_name, any_of(var)), by = c("genotype" = "accession_name")) %>%
  arrange(is.na(across(where(is.numeric))), across(where(is.numeric))) %>%
  mutate(across(where(is.numeric), round, 2))
# remove all NA columns
blue_blup <- blue_blup[, colSums(is.na(blue_blup)) < nrow(blue_blup)]

master_data[[paste0("BLUP_BLUE_", var)]] <- blue_blup
}
```

## Palmira trial

```{r}
if (cohort == "first"){ 
PALMIRA <- trial_rm_sd %>% filter(trial_name %in% c("202151DVGST_ciat")) %>% 
  select(accession_name, any_of(trait_ideal))

# remove empty cols
PALMIRA <- PALMIRA[, colSums(is.na(PALMIRA)) < nrow(PALMIRA)]

# extract reps in palmira
testigos_palmira <- PALMIRA %>% count(accession_name) %>% filter(n > 1) %>% pull(accession_name)

# calculate mean of checks in Palmira

palmira_checks_summary <- PALMIRA %>% filter(accession_name %in% testigos_palmira) %>% 
  group_by(accession_name) %>% 
  summarise(across(where(is.numeric), mean))

# remeve checks from original data and bind their mean values

one_rep_palmira <- PALMIRA %>% filter(!accession_name %in% testigos_palmira) %>% 
  bind_rows(palmira_checks_summary)

# paste BLUEs_ word to each trait of one_rep_palmira

colnames(one_rep_palmira) <- c("accession_name", paste("BLUEs", colnames(one_rep_palmira[-1]), sep = "_"))

# add palmira BLUEs_value to master file
master_data$BLUE_202151DVGST_ciat <- 
  one_rep_palmira %>%  mutate(across(where(is.numeric), round, 2))

# put the Palmira data into each BLUP_BLUE_trait sheet 
# root_type
master_data$BLUP_BLUE_root_type1_5 <- 
  master_data$BLUP_BLUE_root_type1_5 %>% 
  left_join(master_data$BLUE_202151DVGST_ciat %>% 
              select(accession_name, BLUEs_root_type1_5) %>% 
              rename(`202151DVGST_ciat` = BLUEs_root_type1_5), by = c("genotype" = "accession_name")) %>% 
  select(-c(root_type1_5), everything(), root_type1_5)


# put the palmira data into each BLUP_BLUE_trait

# plant_type
master_data$BLUP_BLUE_plant_type <- 
  master_data$BLUP_BLUE_plant_type %>% 
  left_join(master_data$BLUE_202151DVGST_ciat %>% 
              select(accession_name, BLUEs_plant_type) %>% 
              rename(`202151DVGST_ciat` = BLUEs_plant_type), by = c("genotype" = "accession_name")) %>% 
  select(-c(plant_type), everything(), plant_type)

# height_1st_branch

master_data$BLUP_BLUE_height_1st_branch <- 
  master_data$BLUP_BLUE_height_1st_branch %>% 
  left_join(master_data$BLUE_202151DVGST_ciat %>% 
              select(accession_name, BLUEs_height_1st_branch) %>% 
              rename(`202151DVGST_ciat` = BLUEs_height_1st_branch), by = c("genotype" = "accession_name")) %>% 
  select(-c(height_1st_branch), everything(), height_1st_branch)

# DM_nirs

master_data$BLUP_BLUE_DM_gravity <- 
  master_data$BLUP_BLUE_DM_gravity %>% 
  left_join(master_data$BLUE_202151DVGST_ciat %>% 
              select(accession_name, BLUEs_DM_nirs) %>% 
              rename(`202151DVGST_ciat` = BLUEs_DM_nirs), by = c("genotype" = "accession_name")) %>% 
  select(-c(DM_gravity), everything(), DM_gravity)
}
```

## Stability analysis

```{r}

for (var in variables) {

stab <- met_results$stability %>% 
  filter(trait == var) %>% 
  arrange(superiority) %>% 
        pivot_wider(names_from = "trait", values_from = c('predicted.value')) 

# Change colname
colnames(stab)[5] <- paste('BLUPs', colnames(stab)[5], sep = '_') 
colnames(stab)[c(2, 3, 4)] <- paste(colnames(stab)[c(2, 3, 4)], var, sep = '_') 

master_data[[paste0("stability_", var)]] <- stab
}


ind <- grep("^stability_", names(master_data))


# select elements that satisfy the condition
stab_values <- master_data[ind] %>% 
  reduce(inner_join, by = "genotype") %>% 
  select(!starts_with("BLUPs_")) %>% 
  mutate(across(where(is.numeric), round, 2))
```

## BLUE and BLUP data together

```{r}
BLUEs_BLUPs <- 
  obj$blues_blups %>%
  select(trait, genotype, trial, BLUEs, seBLUEs) %>%
  filter(trait %in% variables) %>% 
  pivot_wider(names_from = "trait", values_from = c("BLUEs", "seBLUEs")) %>%
  pivot_wider(names_from = trial, values_from = c(
    paste("BLUEs", variables, sep = "_"),
    paste("seBLUEs", variables, sep = "_")
  )) %>%
  left_join(
    met_results$overall_BLUPs %>%
      select(!status) %>%
      rename(
        BLUPs = predicted.value,
        seBLUPs = std.error
      ) %>%
      pivot_wider(names_from = "trait", values_from = c("BLUPs", "seBLUPs")),
    by = "genotype"
  ) %>%
  arrange(desc(BLUPs_DM_gravity)) %>% 
  arrange(is.na(across(where(is.numeric))), across(where(is.numeric))) %>%
  mutate(across(where(is.numeric), round, 2))
# remove all NA columns
  BLUEs_BLUPs <- BLUEs_BLUPs[, colSums(is.na(BLUEs_BLUPs)) < nrow(BLUEs_BLUPs)]


if(cohort == "first") { 
# put BLUES from PALMIRA data set together with the rest.
  
  blue_MET_palmira <- master_data$BLUE_202151DVGST_ciat
    
  
  colnames(blue_MET_palmira)[-1] <-
    c(paste(colnames(blue_MET_palmira)[-1], "202151DVGST_ciat", sep = "_")) 
  
  #BLUEs_branch_angle_202176DVGST_repe
  
BLUEs_BLUPs <- 
  BLUEs_BLUPs %>% left_join(blue_MET_palmira, by = c("genotype" = "accession_name"))
}

# put all together stab_values with blues_blups
BLUEs_BLUPs <- 
  BLUEs_BLUPs %>% left_join(stab_values, by = 'genotype')  
  
    
header_sort = vector()
for (i in 1:length(variables)) {
  
  header_sort = c(header_sort, 
                  grep(variables[i], sort(names(BLUEs_BLUPs)), value=TRUE) 
  )
  
}


BLUEs_BLUPs <- BLUEs_BLUPs %>%
  select(genotype, all_of(header_sort), -starts_with("se")) 
BLUEs_BLUPs <- BLUEs_BLUPs %>% 
  relocate(colnames(BLUEs_BLUPs)[str_detect(colnames(BLUEs_BLUPs), "DM_gravity")], .after = genotype)

if(cohort == "first") {
BLUEs_BLUPs <- BLUEs_BLUPs %>% left_join(blue_MET_palmira %>% 
                            select(accession_name, BLUEs_DM_nirs_202151DVGST_ciat),
                          by = c("genotype" = "accession_name")) %>% 
  relocate(BLUEs_DM_nirs_202151DVGST_ciat, .after = genotype)
}




master_data[["BLUEs_BLUPs_MET"]] = BLUEs_BLUPs

```

## Genotypic correlation

```{r}

geno_cor <- gg_cor(
  colours = c("red", "white", "blue"),
  data = BLUPs_table, # remove carotenoids
  label_size = 2.5
) + 
  theme(
  axis.text.y = element_text(size = 14),
  axis.text.x = element_text(size = 14))


ggsave(paste("images\\geno_corr", trial_interest, Sys.Date(), ".png", sep = "_"),
       plot = geno_cor, units = "in", dpi = 300, width = 14, height = 8)
```

## Save the master data results

```{r}
folder_output <- here::here("output//")
meta_file_name <- paste0(folder_output, paste("2022", trial_interest, cohort, "cohort", "master_results", Sys.Date(), ".xlsx", sep = "_"))

write.xlsx(master_data, file = meta_file_name)

# It is neccessary change some elements names from master_file
grep("^BLUP_BLUE_germinated_number_plot", names(master_data))
names(master_data)[8] <- "BLUP_BLUE_germ_number_plot"

grep("^stability_germinated_number_plot", names(master_data))
names(master_data)[26] <- "stability_germ_number_plot"

names(master_data)[19] <- "BLUP_BLUE_root_commercial"
names(master_data)[27] <- "stability_germ_number_plot"
names(master_data)[41] <- "stability_root_commercial"

write.xlsx(master_data, file = meta_file_name)

```

## Index selection

```{r}
list_file <- list.files(folder_output)
sel_file <- list_file[str_detect(list_file, "_master_results_") &
  str_detect(list_file, trial_interest) &
  str_detect(list_file, cohort)]
sel_file

sel_file[2]
blupDF_kp <- read_excel(
  paste(folder_output,
    sel_file[2],
    sep = ""
  ),
  sheet = paste0("BLUPs_", "gxe")
)
```

## Selection index

```{r}
colnames(blupDF_kp)

index_traits <- c("DM_gravity", "height_1st_branch", "yield_ha")

index_dat <- blupDF_kp %>%
  select("accession_name", all_of(index_traits)) %>% 
  drop_na()
```

## Selection index function

```{r}
# multi-trait -------------------------------------------------------------
library(explor)
library(FactoMineR)
library(factoextra)
library(cowplot)
library(ggpubr)
pca_index <- function(data, id, variables = NULL, percentage = 0.20, b) {
  # The data set to be analyzed. It should be in the form of a data frame.
  data <- as.data.frame(data)
  rownames(data) <- data[, id]
  if (is.null(variables)) variables <- names(data)[names(data) != id]
  data <- data[, variables]
  index <- selIndex(Y = as.matrix(data), b = b, scale = T)
  index <- c(index)
  data$index <- index
  data <- data %>% arrange(desc(index))
  data$selected <- NA
  data$selected[1:(round(percentage * nrow(data)))] <- TRUE
  data$selected <- ifelse(is.na(data$selected), FALSE, data$selected)
  res.pca <- PCA(data, graph = T, scale.unit = T, quali.sup = ncol(data))
  p1 <- fviz_pca_var(res.pca, col.var = "black", repel = T) +
  theme_xiaofei()
  p2 <- fviz_pca_ind(res.pca,
    label = "none", habillage = data$selected,
    palette = c("#00AFBB", "#FC4E07"), addEllipses = T
  ) +
  theme_xiaofei()
  # labs(title =  paste("Selection:",
  #                     paste0(percentage*100,"%")),
  #      subtitle = paste("Weights:", "(", paste0(b, collapse = ', '),")"  ))
  final <- ggdraw() +
  draw_plot(p1, x = 0, y = 0, width = .5, height = 1) +
  draw_plot(p2, x = .5, y = 0.2, width = .5, height = 0.6) +
  draw_plot_label(
    label = c("A", "B"), size = 15,
    x = c(0, 0.5), y = c(1, 1)
  )
  
  # final <- ggarrange(p1, p2, legend = "bottom", common.legend = T)
  # final <- annotate_figure(final,
  #   top = text_grob(paste(
  #     "Selection:",
  #     paste0(percentage * 100, "%"), "\n",
  #     paste("Weights:", "(", paste0(b, collapse = ", "), ")", "\n")
  #   ), color = "black", face = "bold", size = 14)
  # )
  selection <- data %>% filter(selected == T)
  return(list(res.pca = res.pca, final = final, results = data, selection = selection))
}
selIndex <- function (Y, b, scale = FALSE) 
{
    if (scale) {
        return(scale(Y) %*% b)
    }
    return(Y %*% b)
}
```

## Index selection

```{r}

res.pca <- pca_index(data = index_dat, id = "accession_name", b = c(10, 10, 10), percentage = 0.20)
res.pca_final <- res.pca$final
res.pca_final
# ggsave(paste("images/selection",  trial_interest, Sys.Date(), ".png"), plot = res.pca_final, units = "in", dpi = 300, width = 10, height = 10)
res.pca$selection
selections <- res.pca$results %>% rownames_to_column(var = "accession_name") 
selections %>% 
  select(accession_name, index, everything()) %>% 
  write.table("clipboard", sep = "\t", col.names = T, row.names = F)
```

## Add index column to BLUEs_BLUPs_MET

```{r}
BLUEs_BLUPs <- 
  master_data$BLUEs_BLUPs_MET %>% 
  left_join(selections[-c(2:4)], by = c("genotype" = "accession_name")) %>% 
  relocate(index, selected, .before = 2)

BLUEs_BLUPs <- BLUEs_BLUPs %>% 
  arrange(is.na(selected))
master_data[["BLUEs_BLUPs_MET"]] = BLUEs_BLUPs
```

## Save the master data results

```{r}
folder_output <- here::here("output//")

write.xlsx(master_data, file = meta_file_name)
```
